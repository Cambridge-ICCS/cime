#!/usr/bin/env python3

"""
List e3sm test suites. Can be used to show what's being tested. Can just
list tested grids, compsets, etc.
"""

from standard_script_setup import *
from CIME import utils
from CIME import get_tests

import sys
import argparse


def parse_command_line():
    description = """
%(prog)r will gather all tests from `suites` and print the unique term values.

Examples
--------
>>> %(prog)s e3sm_developer
ERS.f19_g16_rx1.A.docker_gnu
NCK.f19_g16_rx1.A.docker_gnu

>>> %(prog)s -t compsets e3sm_developer
A
F2010
I1850ELM"""

    parser = argparse.ArgumentParser(
        description=description, formatter_class=argparse.RawDescriptionHelpFormatter
    )

    utils.setup_standard_logging_options(parser)

    subparsers = parser.add_subparsers(dest="subcommand")

    subparsers.add_parser("list", help="Lists available test suites.")

    suites_parser = subparsers.add_parser(
        "suites", help="List term values for test suites."
    )

    suites_parser.add_argument(
        "suites",
        nargs="+",
        help="The test suites to list.",
    )

    suites_parser.add_argument(
        "-t",
        "--term",
        choices=("compsets", "grids", "testcases", "tests"),
        default="tests",
        help="The term from a testname to print.",
    )

    # Print help instead of usage.
    if len(sys.argv) == 1:
        parser.print_help()

        sys.exit(0)

    kwargs = vars(parser.parse_args())

    utils.configure_logging(**kwargs)

    return kwargs


def list_tests(term, suites, **_):
    things = set()

    for suite in suites:
        tests = get_tests.get_test_suite(suite)

        if term == "tests":
            things |= set(tests)
        else:
            for test in tests:
                testcase, _, grid, compset, *_ = utils.parse_test_name(test)

                if term == "compsets":
                    things.add(compset)
                elif term == "grids":
                    things.add(grid)
                elif term == "testcases":
                    things.add(testcase)

    print(f"Listing {term!r} for test suites: {', '.join(suites)}")

    for item in sorted(things):
        print("  {}".format(item))

    print(f"Found {len(things)} {term!r}")


def list_suites():
    test_suites = sorted(get_tests.get_test_suites())

    for suite in test_suites:
        print(suite)

    print(f"Found {len(test_suites)} test suites")


def _main_func():
    args = parse_command_line()

    if args["subcommand"] == "list":
        list_suites()
    else:
        list_tests(**args)


if __name__ == "__main__":
    _main_func()
