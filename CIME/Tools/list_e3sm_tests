#!/usr/bin/env python3

"""
List e3sm test suites. Can be used to show what's being tested. Can just
list tested grids, compsets, etc.
"""

from standard_script_setup import *
from CIME import utils
from CIME import get_tests

import sys
import argparse


def parse_command_line(args):
    description = """
%(prog)r will gather all tests from `suites` and print the unique term values.

Examples
--------
>>> %(prog)s e3sm_developer
ERS.f19_g16_rx1.A.docker_gnu
NCK.f19_g16_rx1.A.docker_gnu

>>> %(prog)s -t compsets e3sm_developer
A
F2010
I1850ELM"""

    parser = argparse.ArgumentParser(
        description=description, formatter_class=argparse.RawDescriptionHelpFormatter
    )

    utils.setup_standard_logging_options(parser)

    parser.add_argument(
        "suites",
        nargs="+",
        help="The test suites to list.",
    )

    parser.add_argument(
        "-t",
        "--term",
        choices=("compsets", "grids", "testcases", "tests"),
        default="tests",
        help="The term from a testname to print.",
    )

    try:
        args = utils.parse_args_and_handle_standard_logging_options(args, parser)
    except SystemExit:
        parser.print_help()

        sys.exit(0)

    return vars(args)


def list_tests(term, suites, **_):
    things = set()

    for suite in suites:
        tests = get_tests.get_test_suite(suite)
        for test in tests:
            testcase, _, grid, compset = utils.parse_test_name(test)[:4]
            if term == "compsets":
                things.add(compset)
            elif term == "grids":
                things.add(grid)
            elif term == "testcases":
                things.add(testcase)
            elif term == "tests":
                things.add(test)
            else:
                utils.expect(False, "Unrecognized thing to list '{}'".format(term))

    print("Tested {} for test suites: {}".format(term, ", ".join(suites)))

    for item in sorted(things):
        print("  {}".format(item))


def _main_func():
    args = parse_command_line(sys.argv)

    list_tests(**args)


if __name__ == "__main__":
    _main_func()
